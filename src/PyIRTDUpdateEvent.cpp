// This file implements the IRTDUpdateEvent Interface for Python.
// Generated by makegw.py

#include "exceltypes.h"
#include "PyIRTDUpdateEvent.h"

using Excel::IRTDUpdateEvent;

const IID IID_IRTDUpdateEvent = {0xa43788c1, 0xd91b, 0x11d3, 0x8f, 0x39, 0x00, 0xc0, 0x4f, 0x36, 0x51, 0xb8};

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIRTDUpdateEvent::PyIRTDUpdateEvent(IUnknown *pdisp):
	PyIDispatch(pdisp)
{
	ob_type = &type;
}

PyIRTDUpdateEvent::~PyIRTDUpdateEvent()
{
}

/* static */ IRTDUpdateEvent *PyIRTDUpdateEvent::GetI(PyObject *self)
{
	return (IRTDUpdateEvent *)PyIDispatch::GetI(self);
}

// @pymethod |PyIRTDUpdateEvent|UpdateNotify|Description of UpdateNotify.
PyObject *PyIRTDUpdateEvent::UpdateNotify(PyObject *self, PyObject *args)
{
	IRTDUpdateEvent *pIRTDUE = GetI(self);
	if ( pIRTDUE == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":UpdateNotify") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIRTDUE->UpdateNotify( );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIRTDUE, IID_IRTDUpdateEvent );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIRTDUpdateEvent|GetHeartbeatInterval|Description of GetHeartbeatInterval.
PyObject *PyIRTDUpdateEvent::GetHeartbeatInterval(PyObject *self, PyObject *args)
{
	IRTDUpdateEvent *pIRTDUE = GetI(self);
	if ( pIRTDUE == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":GetHeartbeatInterval") )
		return NULL;
	long interval;
	PY_INTERFACE_PRECALL;
	interval = pIRTDUE->GetHeartbeatInterval();
	PY_INTERFACE_POSTCALL;

	return PyLong_FromLong(interval);

}

// @pymethod |PyIRTDUpdateEvent|PutHeartbeatInterval|Description of PutHeartbeatInterval.
PyObject *PyIRTDUpdateEvent::PutHeartbeatInterval(PyObject *self, PyObject *args)
{
	IRTDUpdateEvent *pIRTDUE = GetI(self);
	if ( pIRTDUE == NULL )
		return NULL;
    long interval;
	if ( !PyArg_ParseTuple(args, "l:PutHeartbeatInterval", &interval) )
		return NULL;

	PY_INTERFACE_PRECALL;
	pIRTDUE->PutHeartbeatInterval(interval);
	PY_INTERFACE_POSTCALL;

	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIRTDUpdateEvent|Disconnect|Description of Disconnect.
PyObject *PyIRTDUpdateEvent::Disconnect(PyObject *self, PyObject *args)
{
	IRTDUpdateEvent *pIRTDUE = GetI(self);
	if ( pIRTDUE == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":Disconnect") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIRTDUE->Disconnect( );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIRTDUE, IID_IRTDUpdateEvent );
	Py_INCREF(Py_None);
	return Py_None;

}

// @object PyIRTDUpdateEvent|Description of the interface
static struct PyMethodDef PyIRTDUpdateEvent_methods[] =
{
	{ "UpdateNotify", PyIRTDUpdateEvent::UpdateNotify, 1 }, // @pymeth UpdateNotify|Description of UpdateNotify
	{ "GetHeartbeatInterval", PyIRTDUpdateEvent::GetHeartbeatInterval, 1 }, // @pymeth GetHeartbeatInterval|Description of GetHeartbeatInterval
	{ "PutHeartbeatInterval", PyIRTDUpdateEvent::PutHeartbeatInterval, 1 }, // @pymeth PutHeartbeatInterval|Description of PutHeartbeatInterval
	{ "Disconnect", PyIRTDUpdateEvent::Disconnect, 1 }, // @pymeth Disconnect|Description of Disconnect
	{ NULL }
};

PyComTypeObject PyIRTDUpdateEvent::type("PyIRTDUpdateEvent",
		&PyIDispatch::type,
		sizeof(PyIRTDUpdateEvent),
		PyIRTDUpdateEvent_methods,
		GET_PYCOM_CTOR(PyIRTDUpdateEvent));
